var spinner = new Spinner({
    length: 4,
    width: 2,
    radius: 5
});
/**
 * ajax请求公共方法-promise方式调用
 * 
 * @param {String}
 *            url 请求URL
 * @param {Object}
 *            params 请求参数
 * @param {String}
 *            method 请求方法
 * @return {Promise}
 */
function ajax(url, params, method) {
    var deferred = $.Deferred();
    $.ajax({
        type: method || 'POST',
        url: url,
        traditional: true,
        data: params || {},
        dataType: 'json',
        success: function(resp) {
            deferred.resolve(resp);
        },
        error: function(resp) {
            deferred.reject(resp);
        }
    });
    return deferred.promise();
}
/**
 * 高级选人组件 为了方便处理逻辑，本组件内部使用了vue.js v2.1.10版本 如果使用本组件的页面已经使用了vue.js 其他版本，可能会导致问题。
 * 
 */
function createUserSelectorComponent(instance) {
	$("body").css("overflow","hidden");
    var usId = 'us' + (new Date()).getTime();
    instance.usId = usId;
    var compentName = 'user-selector-' + usId;
    var _userSelectorTpl = '\
    <div class="us-modal" v-if="modal">\
      <div class="us-mask"></div>\
      <article class="us-content">\
        <i class="iconfont icon-close closeIcon" @click="cancel"></i>\
        <h2>{{title}}</h2>\
        <section>\
          <div class="tjyh-search">\
            <input @keyup.enter="searchUser" v-model="searchKey" type="text" class="jqx-widget-content jqx-input jqx-widget jqx-rc-all tjyh-search-key" placeholder="输入姓名 / 工号"> <a href="javascript:void(0);" class="bh-btn bh-btn-primary waves-effect bh-btn-small" @click="searchUser">搜索</a>\
          </div>\
          <div class="bh-mt-16 tjyh-main">\
            <div class="tjyh-main-left">\
              <div class="tjrh-main-left-tab">\
                <ul>\
                  <li>组织机构</li>\
                  <li>常用群组</li>\
    			  <li>个人群组</li>\
                </ul>\
                <div class="tjyh-tab-content-1 bh-mt-8">\
                  <div class="tjyh-tree tjyh-zzjg-tree"></div>\
                </div>\
                <div class="tjyh-tab-content-2 bh-mt-8">\
                  <div class="tjyh-tree tjyh-cyfz-tree"></div>\
                </div>\
		    	<div class="tjyh-tab-content-3 bh-mt-8">\
		        <div class="tjyh-tree tjyh-grqz-tree"></div>\
		        </div>\
              </div>\
            </div>\
            <div class="tjyh-main-middle">\
              <div class="tjyh-main-middle-top">\
                <span>待选人员</span> <span class="tjyh-main-middel-count">{{users.length}}</span>\
                <div class="tjyh-main-middle-select">\
                	<select v-model="selectedOffice" v-if="isDeptTab">\
					  <option v-for="option in deptOfficeItems" :value="option.RZDM">\
					    {{ option.RZMC }}\
					  </option>\
					</select>\
                </div>\
              </div>\
              <div class="tjyh-main-middle-main">\
                <div class="tjyh-middle-table">\
                  <span v-if="users.length == 0" style="color: #999">无数据</span>\
                  <template v-if="users.length != 0">\
                    <div class="gm-member-row bh-clearfix">\
                      <div class=" bh-col-md-2">\
                        <div class="bh-checkbox">\
                          <label> <input type="checkbox" :disabled="!multiple" :checked="isCheckedAll" @click="checkAll" style="opacity: 1;" >\
                          </label>\
                        </div>\
                      </div>\
                      <div class=" bh-col-md-3">\
                        <B>姓名</B>\
                      </div>\
                      <div class=" bh-col-md-3">\
                        <B>工号</B>\
                      </div>\
                      <div class=" bh-col-md-4">\
                        <B>组织机构</B>\
                      </div>\
                    </div>\
                    <div class="tjyh-middle-scroll">\
                      <div v-for="user in users" class="gm-member-row bh-clearfix tjyh-middle-item">\
                        <div class=" bh-col-md-2">\
                          <div class="bh-checkbox">\
                            <label> <input type="checkbox" :value="user" v-model="selected" @click="checkOne(user)" style="opacity: 1;">\
                            </label>\
                          </div>\
                        </div>\
                        <div :title="user.value" class=" bh-col-md-3 xm" style="overflow: hidden; white-space: nowrap; text-overflow: ellipsis;">{{user.value}}</div>\
                        <div :title="user.data" class=" bh-col-md-3 zgh" style="overflow: hidden; white-space: nowrap; text-overflow: ellipsis;">{{user.data}}</div>\
                        <div :title="user.deptName" class=" bh-col-md-4 dept" style="overflow: hidden; white-space: nowrap; text-overflow: ellipsis;">{{user.deptName}}</div>\
                      </div>\
                    </div>\
    				<div v-if="isShowLoadmore" class="tjyh-middle-page"><a href="javascript:void(0);" @click="searchUser(\'loadmore\')">加载更多</a> </div>\
                  </template>\
                </div>\
              </div>\
            </div>\
            <div class="tjyh-main-right">\
              <div class="tjyh-main-right-top">\
                <span>已选 <span class="tjyh-main-right-count">{{selected.length}}</span></span>\
                <div>\
                  <a @click="selectAllOrClear">全选/清除 </a>|<a @click="setTop"> 置顶 </a>|<a @click="setBottom"> 置底 </a>|<a @click="moveUp"> 上移 </a>|<a @click="moveDown"> 下移 </a>|<a @click="deleteRecords"> 删除</a>\
                </div>\
              </div>\
              <div class="tjyh-main-right-main">\
                <div v-for="item in selected" class="gm-member-row bh-clearfix tjyh-selected-item" :userItem="item" :class="{\'bh-ch-active\': item._isSelected}" @click="selectOne(item)" >\
                  <div :title="item.value" class=" bh-col-md-4" style="overflow: hidden; white-space: nowrap; text-overflow: ellipsis;">{{item.value}}</div>\
                  <div :title="item.data" class=" bh-col-md-4" style="overflow: hidden; white-space: nowrap; text-overflow: ellipsis;">{{item.data}}</div>\
                  <div :title="item.deptName" class=" bh-col-md-4" style="overflow: hidden; white-space: nowrap; text-overflow: ellipsis;">{{item.deptName}}</div>\
                </div>\
              </div>\
		      <div class="tjyh-main-right-bottom">\
    			<a href="javascript:void(0);" class="bh-btn bh-btn-primary waves-effect" @click="addToGrqz">添加到个人群组</a>\
		      </div>\
            </div>\
          </div>\
        </section>\
        <footer class="bh-mv-16 tjyh-footer">\
          <a href="javascript:void(0);" class="bh-btn bh-btn-primary waves-effect" @click="confirm">确定</a>\
          <a href="javascript:void(0);" class="bh-btn bh-btn-default waves-effect" @click="cancel">取消</a>\
        </footer>\
      </article>\
    </div>';

    Vue.component(compentName, {
        template: _userSelectorTpl,
        data: function() {
            return {
                modal: true,
                multiple: instance.options.multiple,
                title: instance.options.title,
                searchKey: "",
                currentDeptId: "",
                currentGroupId: "",
                currentGrqzId: "",
                showPosition: true,
                selected: [], // 选中值
                depts: [], // 所有部门
                groups: [], // 所有群组
                grqzs: [], // 所有个人群组
                teachers: [], // 所有老师
                students: [], // 所有学生
                users: [], // 所有用户
                initAllUsers: instance.options.initAllUsers, // 初始化时传进的所有用户集合，选人组件用户数据将在此集合中过滤
                deptOfficeItems: [{
                    RZDM: '',
                    RZMC: '全部人员'
                }], // 任职
                selectedOffice: "",
                isSelectedAll: false, // 左侧已选择区域 控制是否全选/清除
                notInUsersItems: [],
                isDeptTab: true,
                selectTabItem: 0,
                grqzList: [],
                isShowLoadmore: false,
                pageSize: 200,
                pageNum: 1
            };
        },
        computed: {
            isCheckedAll: function() {
                return this.users.length == (this.selected.length - this.notInUsersItems.length) && this.users.length != 0;
            }
        },
        watch: {
            currentDeptId: function(newDeptId) {
            	var vm = this;
                this.pageNum = 1;
                this.pageSize = 200;
                var positionList = instance.options.positionList||[];
                if(positionList.length>0){
                	vm.deptOfficeItems = positionList;
            		vm.selectedOffice = positionList[0].RZDM;
                	this.searchUser(null, {
            			searchDeptCode: newDeptId,
            			positionCode:positionList[0].RZDM
            		});
                }else{
                	this.getDeptOfficeItems();
                    if (newDeptId == -1) {
                        // 当前选中的部门节点如果是根节点则调用searchUser.do查询所有人员，此时不能传部门id
                        this.searchUser(null, {
                            searchText: ''
                        });
                    } else {
                        // 非根节点的情况，则通过部门id查询该部门的人员
                		this.searchUser(null, {
                			searchDeptCode: newDeptId
                		});
                    }
                }
            },
            currentGroupId: function(newGroupId) {
                this.pageNum = 1;
                this.pageSize = 200;
                this.searchUser(null, {
                    searchGroupId: newGroupId
                });
            },
            currentGrqzId: function(newGrqzId){
            	this.pageNum = 1;
            	this.pageSize = 200;
            	this.searchUser(null,{
            		searchGrqzId: newGrqzId
            	},instance.options.api.getGrqzUsers);
            },
            selectTabItem: function(newValue){
            	if (newValue == 0) {
                    this.searchUser(null, {
                        searchDeptCode: this.currentDeptId,
                        positionCode: this.selectedOffice
                    });
                } else if(newValue == 1){
                	if (this.currentGroupId){
                		this.searchUser(null, {
    	            		searchGroupId: this.currentGroupId
    	            	});
                	}
            	} else {
            		if(this.currentGrqzId){
            			this.searchUser(null, {
                			searchGrqzId: this.currentGrqzId
                		},instance.options.api.getGrqzUsers);
            		}
            	}
            },
//            isDeptTab: function(newValue) {
//            	var vm = this;
//                if (newValue) {
//                    this.searchUser(null, {
//                        searchDeptCode: this.currentDeptId
//                    });
//                } else {
//            		this.searchUser(null, {
//            			searchGroupId: this.currentGroupId
//            		});
//            	}
//            },
            selectedOffice: function(newOffice) {
                this.getOfficePerson();
            }
        },
        methods: {
            // bindKeyup: function() {
            //     $('.tjyh-search .tjyh-search-key').bind('keyup', function(e) {
            //         if (e.keyCode == "13") {
            //             $(".tjyh-search .bh-btn-small")[0].click();
            //         }
            //     });
            // },
            cancel: function() {
            	$("body").css("overflow-y","auto");
                this.modal = false;
                instance.vm.$destroy();
                $('.tjyh-zzjg-tree').jqxTree('destroy');
                $('#' + instance.vmId).remove();
            },
            confirm: function() {
                this.cancel();
                // 将vuejs自动生成的属性删除
                var results = $.extend(true, [], this.selected);
                results.forEach(function(obj, i) {
                    delete obj._isSelected;
                });
                instance.options.callback(results);
            },
            searchUser: function(e, params, urlInfo) {
                var vm = this;
                spinner.spin($('.tjyh-main-middle')[0]);
                if (this.initAllUsers.length == 0) {
                	var searchUrl = instance.options.api.getUsers;
                	if(vm.selectTabItem == 2){
                		searchUrl = instance.options.api.getGrqzUsers;
                	}
                    var url = urlInfo || searchUrl;
                    var defaultParams = {
                        pageSize: 200,
                        pageNum: 1
                    };
                    if (!params) {
                        params = {
                            searchText: this.searchKey
                        };
                        // esb接口支持后 下面代码要去掉
                        // this.currentDeptId = -1;
                        if (this.selectTabItem == 0) {
                            params.searchDeptCode = this.currentDeptId;
                        } else if(this.selectTabItem == 1){
                        	params.searchGroupId = this.currentGroupId;
                        } else {
                            params.searchGrqzId = this.currentGrqzId;
                        }
                    }
                    if (typeof e == 'string') {
                        if (e == 'loadmore') {
                            // 如果searchKey有值，则表示是通过搜索按钮查询的用户，由于目前esb查人接口的问题，不能支持部门和searchKey同时查人，故此时不能传递部门条件
                            if (this.searchKey != '' || this.currentDeptId == -1) {
                                params = {
                                    searchText: this.searchKey,
                                    pageNum: ++this.pageNum
                                };
                            } else if(this.selectTabItem == 0){
                            	params = {
                            		  searchDeptCode: this.currentDeptId,
                                      positionCode: this.selectedOffice,
                                      pageNum: ++this.pageNum	
                            	};
                           	} else if (this.selectTabItem == 1){
                            	params = {
                                      searchGroupId: this.currentGroupId,
                                      pageNum: ++this.pageNum
                                };
                           	} else {
                           		params = {
                                      searchGrqzId: this.currentGrqzId,
                                      pageNum: ++this.pageNum
                                };
                           	}
//                                params = this.isDeptTab ? {
//                                    searchDeptCode: this.currentDeptId,
//                                    positionCode: this.selectedOffice,
//                                    pageNum: ++this.pageNum
//                                } : {
//                                    searchGroupId: this.currentGroupId,
//                                    pageNum: ++this.pageNum
//                                };
//                            }

                        } else if (e == 'loadall') {
                            if (this.searchKey != '' || this.currentDeptId == -1) {
                                params = {
                                    searchText: this.searchKey,
                                    pageNum: 1,
                                    pageSize: 10000000
                                };
                            } else if(this.selectTabItem == 0){
                            	params = {
                            		searchDeptCode: this.currentDeptId,
                                    positionCode: this.selectedOffice,
                                    pageNum: 1,
                                    pageSize: 10000000
                               	};
                            } else if(this.selectTabItem == 1){
                            	params = {
                            		searchGroupId: this.currentGroupId,
                                    pageNum: 1,
                                    pageSize: 10000000
                            	};
                            } else {
                            	params = {
                             		searchGrqzId: this.currentGrqzId,
                                    pageNum: 1,
                                    pageSize: 10000000
                              	};
                            }
                            
//                            else {
//                                params = this.isDeptTab ? {
//                                    searchDeptCode: this.currentDeptId,
//                                    positionCode: this.selectedOffice,
//                                    pageNum: 1,
//                                    pageSize: 10000000
//                                } : {
//                                    searchGroupId: this.currentGroupId,
//                                    pageNum: 1,
//                                    pageSize: 10000000
//                                };
//                            }
                        }
                    } else {
                        this.pageNum = 1;
                        this.pageSize = 200;
                    }
                    params.positionCode = this.selectedOffice;
                    var params = $.extend(true, defaultParams, params);
                    params.userRangeList = instance.options.userRangeList || [];
                    ajax(url, params).done(function(data) {
                        if (data.status == '0') {
                            if (e == 'loadmore') {
                                vm.users = vm.users.concat(data.data.users);
                            } else {
                                vm.users = data.data.users;
                            }
                            vm.isShowLoadmore = vm.users.length != 0 && vm.users.length < data.data.total;
                            vm.handleUsers();
                            vm.$nextTick(function() {
                                $('.tjyh-middle-scroll').niceScroll({
                                    horizrailenabled: false
                                });
                            });
                            spinner.spin();
                        } else {
                            spinner.spin();
                            if (this.pageNum > 1)
                                this.pageNum--;
                        }
                    }).fail(function() {
                        spinner.spin();
                        if (this.pageNum > 1)
                            this.pageNum--;
                    });
                } else {
                    // 前端搜索
                    if (!params) {
                        params = {
                            searchText: this.searchKey
                        };
                    }
                    this.users = this.filterUser(params, this.initAllUsers);

                    vm.$nextTick(function() {
                        $('.tjyh-middle-scroll').niceScroll({
                            horizrailenabled: false
                        });
                    });
                    spinner.spin();
                }

            },
            getInitSelected: function() {
                var userIds = instance.options.initSelectedUsers();
                var vm = this;
                if (userIds != '') {
                    var url = instance.options.api.getUsers;
                    var params = {
                        searchMultiId: userIds,
                        pageSize: 10000000,
                        pageNum: 1
                    };
                    ajax(url, params).done(function(data) {
                        if (data.status == '0') {
                            vm.selected = data.data.users;
                        }
                    });
                }
            },
            getOfficePerson: function() {
                // 待esb查人接口全部支持后，后台统一提供查人接口，再修改此处逻辑。
                // var url = instance.options.api.getOfficePerson;
                // var params = {
                // DM: this.currentDeptId,
                // OFFICE: this.selectedOffice,
                // pageNum:?
                // }
            	this.searchKey = ''; // 每次选择新的树节点，清空搜索框内容
                var params = {
                    searchDeptCode: this.currentDeptId,
                    positionCode: this.selectedOffice
                };
                this.searchUser(null, params);
            },
            handleUsers: function() {
                var vm = this;
                var usersIdArr = [];
                this.users.forEach(function(obj, i) {
                    usersIdArr.push(obj.data);
                });
                this.selected.forEach(function(obj, i) {
                    var index = usersIdArr.indexOf(obj.data);
                    var notIndex = vm.notInUsersItems.indexOf(obj);
                    if (index != -1) {
                        vm.users[index] = obj;
                        notIndex != -1 && vm.notInUsersItems.splice(notIndex, 1);
                    } else {
                        if (notIndex == -1) {
                            vm.notInUsersItems.push(obj);
                        }
                    }
                });
            },
            filterUser: function(filterExp, users) {
                if (filterExp.searchText != undefined) {
                    return users.filter(function(item) {
                        return item.data.indexOf(filterExp.searchText) != -1 || item.value.indexOf(filterExp.searchText) != -1;
                    });
                } else if (filterExp.searchDeptCode != undefined) {
                    return users.filter(function(item) {
                        return item.deptCode == filterExp.searchDeptCode;
                    });
                }
            },
            checkOne: function(user) {
                this.$set(user, '_isSelected', false);
                if (!this.multiple) {
                    var i = this.selected.indexOf(user);
                    this.selected = [];
                    if (i != -1) {
                        this.selected.push(user);
                    }
                }
            },
            checkAll: function() {
                var vm = this;
                if (this.isCheckedAll) {
                    // 从selected中删除users中的所有项
                    this.selected = this.notInUsersItems;
                } else {
                    this.selected = this.notInUsersItems.concat(this.users);
                }
                this.users.forEach(function(obj, i) {
                    vm.$set(obj, '_isSelected', false);
                    vm.isSelectedAll = false;
                });
            },
            selectAllOrClear: function() {
                var vm = this;
                this.isSelectedAll = !this.isSelectedAll;
                this.selected.forEach(function(obj, i) {
                    vm.$set(obj, '_isSelected', vm.isSelectedAll);
                });
            },
            setTop: function() {
                if (!this.isSelectedAll) {
                    var obj = this.splitSelected();
                    this.selected = obj.leftSelected.concat(obj.leftUnselected);
                }
            },
            setBottom: function() {
                if (!this.isSelectedAll) {
                    var obj = this.splitSelected();
                    this.selected = obj.leftUnselected.concat(obj.leftSelected);
                }
            },
            moveUp: function() {
                if (!this.isSelectedAll) {
                    var vm = this;
                    var obj = this.splitSelected();
                    obj.leftSelected.forEach(function(o, i) {
                        var index = vm.selected.indexOf(o) - 1;
                        if (index < 0)
                            index = 0;
                        if (obj.leftSelected.indexOf(obj.leftUnselected[index]) == -1) {
                            obj.leftUnselected.splice(index, 0, o);
                        } else {
                            obj.leftUnselected.splice(index + 1, 0, o);
                        }
                    });
                    this.selected = obj.leftUnselected;
                }
            },
            moveDown: function() {
                if (!this.isSelectedAll) {
                    var vm = this;
                    var obj = this.splitSelected();
                    obj.leftSelected.forEach(function(o, i) {
                        var index = vm.selected.indexOf(o) + 1;
                        obj.leftUnselected.splice(index, 0, o);
                    });
                    this.selected = obj.leftUnselected;
                }
            },
            addToGrqz: function(){
            	var self = this;
//            	var obj = self.splitSelected();
//            	var selectedUser = obj.leftSelected;
            	if(!this.selected || this.selected.length <= 0){
            		$.warn("请选择相关人员！");
            	} else {
            		var selUserIds = [];
        			var userNames = [];
            		$.each(this.selected, function(n, element) {
        				selUserIds.push(element.data);
        				userNames.push(element.value);
        			});
            		//获取个人群组列表
            		var resp = BH_UTILS.doSyncAjax(instance.options.api.getGrqzs, {
            			pageSize: 1000000,
            			pageIndex: 1,
            			searchVal: ''
            		});
            		if(resp && resp.msg == "success"){
            			self.grqzList = resp.datas;
            		}
            		var grqzContnt = "<div class='grqz-add-sel bh-radio bh-radio-group-v'>";
            		$.each(self.grqzList,function(i,v){
            			grqzContnt +='<label class="bh-radio-label" title="'+v.name+'">'
            				+ '<input type="radio" name="grqz-radio" value="'+v.id+'" data-caption="'+v.name+'" style="opacity:1">'
            				+ v.name
            				+ '</label>';

            		});
            		grqzContnt +='<label class="bh-radio-label">'
        				+ '<input type="radio" name="grqz-radio" value="-1" data-caption="" style="opacity:1">'
        				+ '<input type="text" class="bh-form-control jqx-input" maxlength="20" style="display:inline;width:80%" id="newGrqz" value="" placeholder="请输入群组名称"/>'
        				+ '</label>';
            		grqzContnt +="</div>";
            		top.BH_UTILS.bhWindow(grqzContnt,"选择个人群组",[{
    					text: "确定",
    					className: "bh-btn-primary",
    					callback: function($dom) {
    						//添加到群组
    						var grqzId = $('input[name="grqz-radio"]:checked').val();
    						//选中手动输入的群组，群组名称不能为空
    						var newGrqz = $('#newGrqz').val();
    						if(!grqzId){
    							$.warn("请选择个人群组！");
    							return false;
    						} else if(grqzId == '-1' && !newGrqz){
    							$.warn("请输入群组名称！");
    							return false;
    						}
    						//执行添加操作
    						ajax(instance.options.api.addToGrqz, {
    							BIZ_ID: grqzId,
    							TITLE: newGrqz,
    							USER_ID : selUserIds,
    							USER_NAME : userNames
    		                }).done(function(data) {
    		                    if (data.msg == 'success') {
    		                    	$.success("添加成功！");
    		                    	//如果当前选中的是 个人群组，则刷新个人群组
    		                    	if(self.selectTabItem == 2){
    		                    		 setTimeout(function() {
    		                                 self.initGrqzTree();
    		                             }, 0);
    		                    	}
    		                    }
    		                });
    					}
    				},{
    					text: "关闭",
    					className: "bh-btn-default",
    					callback: function($dom) {
    						$dom.jqxWindow("close");
    					}
    				}], {
        	            height: '290px',
        	            width: '300px',
        	        });
            	}
            },
            splitSelected: function() {
                var leftSelected = [];
                var leftUnselected = [];

                this.selected.forEach(function(obj, i) {
                    if (obj._isSelected) {
                        leftSelected.push(obj);
                    } else {
                        leftUnselected.push(obj);
                    }
                });

                return {
                    leftSelected: leftSelected,
                    leftUnselected: leftUnselected
                };
            },
            deleteRecords: function() {
                this.selected = this.selected.filter(function(item) {
                    return !item._isSelected;
                });
            },
            selectOne: function(user) {
                if (user._isSelected == true) {
                    this.$set(user, '_isSelected', false);
                } else {
                    this.$set(user, '_isSelected', true);
                }
            },

            initDeptTree: function() {
                var vm = this;
                var url = instance.options.api.getDepts;
                var deptTree = new TreeWidget({
                    url: url,
                    element: '.tjyh-zzjg-tree',
                    select: function(item) {
                        vm.changeTreeSelected(item, 'dept');
                    },
                    source: instance.datas.depts
                }, instance);
                deptTree.showDepts();
            },
            initGroupTree: function() {
                var vm = this;
                var url = instance.options.api.getGroups;
                var groupTree = new TreeWidget({
                    url: url,
                    element: '.tjyh-cyfz-tree',
                    select: function(item) {
                        vm.changeTreeSelected(item, 'group');
                    },
                    source: instance.datas.groups
                }, instance);
                groupTree.showGroups();
            },
            initGrqzTree: function(){
            	  var vm = this;
                  var url = instance.options.api.getGrqzs;
                  var grqzTree = new TreeWidget({
                      url: url,
                      element: '.tjyh-grqz-tree',
                      select: function(item) {
                          vm.changeTreeSelected(item, 'grqz');
                      },
                      source: instance.datas.grqzs
                  }, instance);
                  grqzTree.showGrqzs();
            },
            changeTreeSelected: function(item, type) {
            	$('.grqz-warn-info').hide();
                this.searchKey = ''; // 每次选择新的树节点，清空搜索框内容
                if (type == 'dept') {
                    this.selectedOffice = ''; // 每次选择新的树节点，默认任职为全部人员
                    this.currentDeptId = item.id;
                    // this.searchUser(null, {searchDeptCode:
                    // this.currentDeptId});
                } else if (type == 'group') {
                    this.currentGroupId = item.id;
                    // this.searchUser(null, {searchGroupId:
                    // this.currentGroupId});
                } else if (type == 'grqz'){
                	 this.currentGrqzId = item.id;
                }
            },

            initTabs: function() {
                var vm = this;
                $('.tjrh-main-left-tab').jqxTabs();
                $('.tjrh-main-left-tab').on('selected', function(event) {
                	$('.grqz-warn-info').hide();
                    // 展示群组时 没有任职
                    vm.isDeptTab = event.args.item == 0;
                    vm.selectTabItem = event.args.item;
                    spinner.spin($('.tjyh-main-middle')[0]);
                    if (event.args.item == 1 && $('.tjyh-cyfz-tree').html() == '') {
                        setTimeout(function() {
                            vm.initGroupTree();
                        }, 0);
                    } else if (event.args.item == 2 && $('.tjyh-grqz-tree').html() == ''){
                    	 setTimeout(function() {
                             vm.initGrqzTree();
                         }, 0);
                    }
                });
            },
            getDeptOfficeItems: function() {
                // 查询部门任职
            	var vm = this;
                var url = instance.options.api.getDeptOfficeItems;
                var DM = this.currentDeptId;
                if (this.currentDeptId == -1)
                    DM = '';
                var params = {
                    DM: DM,
                    CC: ''
                };
                ajax(url, {
                    jsonStr: JSON.stringify(params)
                }).done(function(data) {
                    var jsonData = data;
                    if (jsonData.status == '0') {
                        var deptOfficeItems = jsonData.data;
                        deptOfficeItems.unshift({
                            RZDM: '',
                            RZMC: '全部人员'
                        });
                        vm.deptOfficeItems = deptOfficeItems;
                    }
                });
            }
        },
        created: function() {
            this.modal = true;
        },
        mounted: function() {
            var vm = this;
            spinner.spin($('.tjyh-main-middle')[0]);
            // setTimeout 和 vm.$nextTick()在此处有区别
            // 如果用vm.$nextTick则弹出框打开，仍然需要等待tree渲染完毕，体验不好。
            setTimeout(function() {
                vm.initDeptTree();
                $('.tjyh-main-right-main').niceScroll({
                    horizrailenabled: false
                });
            }, 0);
            this.initTabs();
            this.getInitSelected();
            //this.bindKeyup();
        }
    });
}

/**
 * 左侧组织机构和常用群组树 由于jqxTree本身渲染速度的问题， 如果部门数据量很大，渲染全部树节点有点慢，特别是IE浏览器，
 * 后续考虑换tree组件或者使用异步树解决该问题
 * 
 * @param {[type]}
 *            options [description]
 */
function TreeWidget(options, instance) {
    this.source = options.source;
    this.url = options.url;
    this.element = options.element;
    this.select = options.select;
    // this.checkboxes = options.checkboxes || false;
    this.instance = instance;
}
TreeWidget.prototype.showDepts = function() {
    var self = this;
    if (this.source.length != 0) {
        this.renderTree(this.source);
        spinner.spin();
    } else {
        // loading
        spinner.spin($('.tjyh-main-middle')[0]);
        ajax(this.url).done(function(data) {
            var jsonData = data;
            if (jsonData.status == "0") {
                var deptItems = jsonData.data.deptItems;
                var source = {
                    datatype: "json",
                    datafields: [{
                        name: 'id'
                    }, {
                        name: 'pid'
                    }, {
                        name: 'name'
                    }],
                    id: "id",
                    localdata: deptItems
                };
                var dataAdapter = new $.jqx.dataAdapter(source);
                dataAdapter.dataBind();
                var records = dataAdapter.getRecordsHierarchy('id', 'pid', 'items', [{
                    name: 'name',
                    map: 'label'
                }]);
                // 缓存部门数据
                self.instance.datas.depts = records;
                self.renderTree(records);
            } else {
                spinner.spin();
            }
        }).fail(function() {
            spinner.spin();
        });
    }
};
TreeWidget.prototype.showGroups = function() {
    // loading
    // spinner.spin($('.tjyh-main-middle')[0]);
    var self = this;
    if (this.source.length != 0) {
        this.renderTree(this.source);
        spinner.spin();
    } else {
        ajax(this.url, {
            pageSize: 1000000,
            pageIndex: 1,
            searchVal: ''
        }).done(function(data) {
            if (data.msg == "success") {
                var groupItems = data.datas;
                var source = {
                    datatype: "json",
                    datafields: [{
                        name: 'id'
                    }, {
                        name: 'pid'
                    }, {
                        name: 'text'
                    }],
                    id: "id",
                    localdata: groupItems
                };
                var dataAdapter = new $.jqx.dataAdapter(source);
                dataAdapter.dataBind();
                var records = dataAdapter.getRecordsHierarchy('id', 'parent', 'items', [{
                    name: 'text',
                    map: 'label'
                }]);
                self.instance.datas.groups = records;
                self.renderTree(records);
            } else {
                spinner.spin();
            }
        }).fail(function() {
            spinner.spin();
        });
    }
};
TreeWidget.prototype.showGrqzs = function() {
    var self = this;
    //个人群组不取历史数据，每次都是重新查询，因为当前页会新增群组
//    if (this.source.length != 0) {
//        this.renderTree(this.source);
//        spinner.spin();
//    } else {}
    ajax(this.url, {
        pageSize: 1000000,
        pageIndex: 1,
        searchVal: ''
    }).done(function(data) {
        if (data.msg == "success") {
            var grqzItems = data.datas;
            self.grqzList = data.datas;
            var source = {
                datatype: "json",
                datafields: [{
                    name: 'id'
                }, {
                    name: 'pid'
                }, {
                    name: 'name'
                }],
                id: "id",
                localdata: grqzItems
            };
            var dataAdapter = new $.jqx.dataAdapter(source);
            dataAdapter.dataBind();
            var records = dataAdapter.getRecordsHierarchy('id', 'pid', 'items', [{
                name: 'name',
                map: 'label'
            }]);
            self.instance.datas.grqzs = records;
            self.renderTree(records);
        } else {
            spinner.spin();
        }
    }).fail(function() {
        spinner.spin();
    });

};
TreeWidget.prototype.renderTree = function(source) {
    var self = this;
    $(self.element).jqxTree({
        source: source,
        width: '100%',
        height: '305px'
    });
    $(self.element).niceScroll({
        horizrailenabled: false
    });
    $(self.element).jqxTree('selectItem', null);
    self.bindEvent();
    // 默认选中第一个节点, 并展开第一层节点
    var items = $(self.element).jqxTree("getItems");
    if (items && items.length > 0) {
        var id = items[0].id;
        var $li = $(self.element).find("li[id='" + id + "']")[0];
        $(self.element).jqxTree('selectItem', $li);
        $(self.element).jqxTree('expandItem', $li);
        $.each(items,function(ii,vv){
        	$("li[id='" + vv.id + "']").attr("title",vv.label);
        });
    }
    spinner.spin();
};
TreeWidget.prototype.bindEvent = function() {
    var self = this;
    $(self.element).on('select', function(event) {
        var args = event.args;
        var item = $(self.element).jqxTree('getItem', args.element);
        self.select && self.select(item);
    });
};

/**
 * 用户选择组件
 * 
 * @param {[type]}
 *            options [description]
 */
function UserSelector(options) {
    var defaults = {
        title: "选择人员",
        multiple: true, // 是否是多选选人， 默认true
        userType: 'all', // teaher, student
        api: {
            getUsers: '/WiseBpm/formRunController/searchUser.do',
            getDepts: "/WiseBpm/processManage/getAllDept.do",
            getGroups: "/WiseBpm/common/getAllGroups.do",
            getDeptUsers: "/WiseBpm/formRunController/searchUser.do",
            getGroupUsers: "/WiseBpm/formRunController/searchUser.do",
            getDeptOfficeItems: "/WiseBpm/processManage/getDeptOfficeItems.do",
            getOfficePerson: '/WiseBpm/processManage/getOfficePerson.do'
        },
        initSelectedUsers: function() {
            return '';
        }, // user id， 选人组件初始化时默认选中值列表，默认""
        initAllUsers: [],
        userRangeList: [],//选人范围
        callback: function(data) {} // 选人框关闭时回调函数，data为当前选人控件返回值, 此项必传，用于将选人弹框的返回值设置到页面
    };
    this.options = $.extend(true, defaults, options);
    this.datas = {
        selected: [], // 选中值
        depts: [], // 所有部门
        groups: [], // 所有群组
        grqzs: [], // 所有个人群组
        teachers: [], // 所有老师
        students: [], // 所有学生
        users: []
        // 所有用户
    }; // 缓存选人组件数据
    this.usId = "";
}

UserSelector.prototype.init = function() {
    this.vmId = "vm" + Math.random().toString().replace('.', '');
    if (this.usId == "") {
        createUserSelectorComponent(this);
    }

    var usTemp = '<div id="' + this.vmId + '">' + '<user-selector-' + this.usId + '></user-selector' + this.usId + '></div>';
    $('body').append(usTemp);
    this.vm = new Vue({
        el: '#' + this.vmId
    });
};

UserSelector.prototype.setDatas = function(datas) {
    this.datas = datas;
};

UserSelector.prototype.getDatas = function() {
    return this.datas;
};